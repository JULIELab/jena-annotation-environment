/** 
 * T2ToPipedFormat.java
 * 
 * Copyright (c) 2007, JULIE Lab. 
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0 
 *
 * Author: tomanek (based on code from Menno Rubingh)
 * 
 * Current version: 2.0
 * Since version:   0.7
 *
 * Creation date: Aug 01, 2006
 * 
 * Code from Menno Rubingh: Adapted to new AnnoEnv by tomanek, june 2006
 *  This class is needed to convert the continuously growing .t2 file 
 *  which is generated by Mmax2AL and stored in the DB with the project.
 *  
 *  
 *  --- was: T22Pipe1.java  MR Apr '06 ---
 *
 * Convert ".t2" file to "pipe" format.
 * This removes from each sentence all tokens that contain a '|' character.
 *
 * See comment on method 'lSD_printT2()' in src file Mmax2AL2.java 
 *  for a description of the ".t2" file format. 
 *  Reads stdin, writes stdout.
 *
 * Defines as public items te following two static methods:
 *     convert() --  For call by Java program.  This reads from 'Reader'
 *                   object, and writes to 'PrintWriter' object.
 *    main() -- For call as stand-along program.  This reads stdin, and
 *              writes stdout.
 */

package de.julielab.annoenv.conversions;

import java.io.*;

public class T2ToPipedFormat {

	/**
	 * converts .t2 file in pipedFormat file
	 * 
	 * @param t2File
	 *            the .t2 File
	 * @param tmpDir
	 *            the current working directory where the new file can be
	 *            written
	 * @return current File in pipedFormat
	 */
	public static File convert(File tmpDir, File t2File, int PID) {

		Reader rIn;
		try {
			rIn = new FileReader(t2File);
		} catch (FileNotFoundException e) {
			throw new RuntimeException("failed to convert T2 into PPD format: "
					+ "could not read t2File.", e);
		}
		File outFile = new File(tmpDir.getAbsolutePath() + File.separator
				+ "aT.tmp");
		PrintWriter pwOut;
		try {
			pwOut = new PrintWriter(outFile);
		} catch (FileNotFoundException e) {
			throw new RuntimeException("failed to convert T2 into PPD format: "
					+ "could not open outputstream.", e);
		}

		boolean bInSentence = false;
		int iSentence = 0;

		int iLine = 1;
		BufferedReader br = null;
		try {
			br = new BufferedReader(rIn);

			String strTextID = "";
			String strSentID = "";

			String sIn;
			while ((sIn = br.readLine()) != null) {

				sIn = sIn.trim();

				if (sIn.length() == 0) {// Empty line signfies end of sentence
					pwOut.println("");

					bInSentence = false; // reset
					iSentence = 0;
				} else {
					String[] as = sIn.split("[ \t]+");

					if (!bInSentence) { // 1st line in block
						if (as.length < 3) {
							throw new RuntimeException("1st line in block "
									+ "misses data");
						}
						if (!as[0].equals("SENTENCE")) {
							throw new RuntimeException("1st line in block "
									+ "without keyword SENTENCE");
						}

						strTextID = as[1];
						strSentID = as[2];
						pwOut.print(strTextID + " " + strSentID);

						int iSentID = Integer.parseInt(strSentID);

						bInSentence = true;
						iSentence = 0; // init
					} else {
						if (as.length < 3) {
							StringBuilder t2line = new StringBuilder("");
							for (int i = 0; i < as.length; i++) {
								t2line.append((t2line.length() > 0) ? " " : "");
								t2line.append(as[i]);
							}
							throw new RuntimeException("T2toPPDConversion: "
									+ "T2 file incorrect (at position: "
									+ strTextID + File.separator + strSentID
									+ ")");
						}

						String sToken = as[0];
						String sTag1 = as[1]; // POS
						String sTag2 = as[2]; // annotation from MMAX

						if (sToken.contains("|")) {
							// Ignore token, don't print to output
						} else {
							pwOut.print(" " + sToken + "|" + sTag1 + "||"
									+ sTag2);
						}

						iSentence++;
					}
				}

				iLine++;
			}
		} catch (NumberFormatException e) {
			throw new RuntimeException("failed to convert T2 into PPD format.",
					e);
		} catch (IOException e) {
			throw new RuntimeException("failed to convert T2 into PPD format.",
					e);
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
				}
			}
			pwOut.close();
		}

		return outFile;
	}

	/**
	 * a main method for testing purposes
	 */
	public static void main(String[] args) {

		File tmpDir = new File("/tmp/");
		File t2File = new File(tmpDir.getAbsolutePath() + File.separator
				+ "aT.t2_58");

		System.out.println("tmpDir is directory: " + tmpDir.isDirectory());
		System.out.println("t2File is directory: " + t2File.isFile());
		try {
			File outFile = convert(tmpDir, t2File, 0);
			System.out.println("output written to: " + outFile.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
